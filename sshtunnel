#!/bin/bash

# Copyright 2013 Florian Bruhin <me@the-compiler.org>
# Manages SSH-tunnels via systemd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

g_config="/etc/sshtunnel.conf"
g_service="sshtunnel"

# Gets a config section from the config
# $1: name of the section
conf_section() {
    local secstart
    (( $# < 1 )) && return 2
    [[ -f "$g_config" && -r "$g_config" ]] || return 3
    unset secstart
    while read line; do # No -r by intention
        line="${line%%[;#]*}" # Strip inline comments
        line="${line/=[\'\"]/=}" # Strip string-chars
        line="${line%[\'\"]}"
        [[ -z "$line" ]] && continue
        if [[ "$secstart" ]]; then
            [[ "$line" == '['*']' ]] && return 0 # End of a section
            echo "$line"
        fi
        [[ "$line" == "[$1]" ]] && secstart=1 # Start of a section
    done < "$g_config"
    [[ "$secstart" ]] && return 0 || return 1
}

# Gets a value of a key from the config
# $1: name of the section
# $2: name of the key
# $3: default value (optional)
conf_key() {
    local found
    (( $# < 2 )) && return 2
    found=0
    while read -r line; do
        key="${line%%=*}"
        val="${line#*=}"
        [[ "$key" == "$2" ]] && echo "$val" && found=1
    done < <(conf_section "$1")
    if (( found == 1 )); then
        return 0
    else
        [[ "$3" ]] && echo "$3"
        return 1
    fi
}

# Gets all sections from the config
conf_sections() {
    [[ -f "$g_config" && -r "$g_config" ]] || return 3
    while read -r line; do
        line="${line%%[;#]*}" # Strip inline comments
        if [[ "$line" == '['*']' ]]; then
            line="${line#\[}"
            line="${line%\]}"
            echo "$line"
        fi
    done < "$g_config"
}

# Prints an error message and exits
# $1: message
# $2: exit code (optional)
die() {
    echo "$1" >&2
    exit "${2:-1}"
}

# Prints an usage message
usage() {
    cat >&2 << EOF
Usage: $0 [-c <config>] <command> [<name>]
    -c: Use an alternate config file

    Commands:
        start <name>   Starts the tunnel named <name>
        stop <name>    Stops the tunnel named <name>
        enable <name>  Calls "systemd enable" on the tunnel named <name>
        disable <name> Calls "systemd disable" on the tunnel named <name>
        print <name>   Validates config and prints command that would be run
        ssh-keygen     Generates ssh-key
        start-all      Starts all configured tunnels
        stop-all       Stops running tunnels
        list           Lists running tunnels
        test <name>    Opens a test-connection to the tunnel <name> (to accept host keys, etc)
        log <name>     Show systemd log for <name>
EOF
}

# Parses command line switches
# Call this with "$@"!
parseargs() {
    while :; do
        case "$1" in
            -c | --config)
                g_config="$2"
                shift 2
                ;;
            -h | --help)
                usage
                exit 0
                ;;
            --) # End of all options
                shift
                break
                ;;
            -*)
                usage
                die "Unknown option: $1"
                ;;
            *) # All parameters shifted
                break
                ;;
        esac
    done
    g_cmd="$1"
    shift
    g_arg="$@"
    [[ -f "$g_config" && -r "$g_config" ]] || die "No config found!"
}

# Simple systemd wrapper to start tunnel
cmd_start() {
    systemctl start "${g_service}@${g_arg[0]}.service"
}

# Simple systemd wrapper to stop tunnel
cmd_stop() {
    systemctl stop "${g_service}@${g_arg[0]}.service"
}

# Simple systemd wrapper to show tunnel status
cmd_status() {
    systemctl status "${g_service}@${g_arg[0]}.service"
}

# Simple systemd wrapper to show tunnel log
cmd_log() {
    journalctl -u "${g_service}@${g_arg[0]}.service"
}

# Simple systemd wrapper to enable/disable tunnels
cmd_enable() {
    systemctl enable "${g_service}@${g_arg[0]}.service"
}

cmd_disable() {
    systemctl disable "${g_service}@${g_arg[0]}.service"
}

# List running tunnels
cmd_list() {
    systemctl list-units -t service --full --no-legend --no-pager | \
    while read name loaded active running _; do
        if [[ "$name" == "${g_service}@"*.service && "$running" == running ]]; then
            name="${name#"${g_service}@"}"
            name="${name%.service}"
            echo "$name"
        fi
    done
}

# Start all tunnels
cmd_start_all() {
    conf_sections | grep '^tunnel\.' | while read tunnel; do
        g_arg=("${tunnel#tunnel.}")
        cmd_start
    done
}

# Stop all tunnels
cmd_stop_all() {
    cmd_list | while read tunnel; do
        g_arg=("$tunnel")
        cmd_stop
    done
}

# Actually start a tunnel, gets called from systemd
# Positional parameters:
#   run   Execute command
#   print Print commandline
#   test  Do a test connection
# And any combination thereof. Without any parameter, the profile gets
# validated only.
cmd_profile() {
    local ssh
    local ssh_opts_global
    local monitoring
    local monitor_port
    local monitor_ssh_interval
    local monitor_ssh_count
    local user
    local host
    local userhost
    local port
    local tunnel
    local ssh_opts_local
    local name
    local autossh_env
    local do_print
    local do_exec
    local do_test
    local localuser

    while :; do
        case "$1" in
            print) do_print=1; shift ;;
            run)   do_exec=1;  shift ;;
            test)  do_test=1;  shift ;;
            *) break ;;
        esac
    done

    name="${g_arg[0]}"

    if ! conf_sections | grep '^tunnel\.' | grep -qF "tunnel.$name"; then
        die "Tunnel $name does not exist!"
    fi

    if [[ "$name" == *[^[:alnum:].:_/\\]* ]]; then
        die "Name $name contains an invalid character!"
    fi

    if [[ ! "$do_test" ]]; then
        tunnel_cmd=('exec' '--')
    else
        localuser=$(conf_key general user) || die "user not set"
    fi

    ssh=$(conf_key ssh ssh auto)
    if [[ "$ssh" == auto ]]; then
        which autossh &>/dev/null && ssh=autossh || ssh=ssh
    fi
    which "$ssh" &>/dev/null || die "$ssh not found"

    if [[ "$ssh" == *autossh* ]]; then
        read -ra autossh_env < <(conf_section autossh | grep '^AUTOSSH_')
        tunnel_cmd+=("env" "--" "${autossh_env[@]}" "$ssh")

        monitoring=$(conf_key autossh monitoring ssh)
        case "$monitoring" in
            port)
                monitor_port=$(conf_key autossh monitor_port 10000)
                tunnel_cmd+=("-M" "${monitor_port}" "--")
                ;;
            ssh)
                monitor_ssh_interval=$(conf_key autossh monitor_ssh_interval 15)
                monitor_ssh_count=$(conf_key autossh monitor_ssh_count 3)
                tunnel_cmd+=("-M" "0" "--")
                tunnel_cmd+=("-o" "ServerAliveInterval=$monitor_ssh_interval")
                tunnel_cmd+=("-o" "ServerAliveCountMax=$monitor_ssh_count")
                ;;
            none)
                tunnel_cmd+=("-M" "0" "--")
                ;;
            *)
                die "Invalid value for monitoring!"
                ;;
        esac
    else
        tunnel_cmd+=("$ssh")
    fi

    [[ ! "$do_test" ]] && tunnel_cmd+=('-N') # don't execute a command

    port=$(conf_key "tunnel.$name" port)
    [[ "$port" ]] && tunnel_cmd+=("-p" "$port")

    tunnel=$(conf_key "tunnel.$name" tunnel) || die "tunnel not set"
    [[ ! "$do_test" ]] && tunnel_cmd+=($tunnel) # no quotes sic

    ssh_opts_global=$(conf_key ssh ssh_options)
    [[ "$ssh_opts_global" ]] && tunnel_cmd+=($ssh_opts_global) # no quotes sic
    ssh_opts_local=$(conf_key "tunnel.$name" ssh_options)
    [[ "$ssh_opts_local" ]] && tunnel_cmd+=($ssh_opts_local) # no quotes sic

    user=$(conf_key "tunnel.$name" user)
    host=$(conf_key "tunnel.$name" host) || die "host not set"
    userhost=
    [[ "$user" ]] && userhost+="$user@"
    userhost+="$host"
    tunnel_cmd+=("$userhost")
    [[ "$do_test" ]] && tunnel_cm+=("exit")

    [[ "$do_print" ]] && echo "${tunnel_cmd[@]}"
    [[ "$do_exec" ]] && "${tunnel_cmd[@]}"
    [[ "$do_test" ]] && su "$localuser" -s /bin/bash -c "${tunnel_cmd[*]}" # * sic
}

cmd_ssh_keygen() {
    local user

    user=$(conf_key general user) || die "user not set"
    su "$user" -s /bin/bash -c 'ssh-keygen -N "" -f "$HOME/.ssh/id_rsa"'
    if (( $? == 0 )); then
        echo
        echo "Key generation succeeded. These are the contents of id_rsa.pub"
        echo "for the $user user:"
        echo
        su "$user" -s /bin/bash -c 'cat "$HOME/.ssh/id_rsa.pub"'
    else
        echo
        echo "Key generation failed!"
    fi
}

parseargs "$@"

case "$g_cmd" in
    start)      handler=(cmd_start);         args=1; root=1 ;;
    stop)       handler=(cmd_stop);          args=1; root=1 ;;
    enable)     handler=(cmd_enable);        args=1; root=1 ;;
    disable)    handler=(cmd_disable);       args=1; root=1 ;;
    start-all)  handler=(cmd_start_all);     args=0; root=1 ;;
    stop-all)   handler=(cmd_stop_all);      args=0; root=1 ;;
    list)       handler=(cmd_list);          args=0; root=0 ;;
    print)      handler=(cmd_profile print); args=1; root=0 ;;
    ssh-keygen) handler=(cmd_ssh_keygen);    args=0; root=1 ;;
    connect)    handler=(cmd_profile run);   args=1; root=0 ;;
    test)       handler=(cmd_profile test);  args=1; root=1 ;;
    status)     handler=(cmd_status);        args=1; root=0 ;;
    log)        handler=(cmd_log);           args=1; root=0 ;;
    help)       usage; exit 0                               ;;
    "")         usage; exit 1                               ;;
    *)          usage; die "Invalid command: $g_cmd"        ;;
esac

if (( ${#g_arg} < args )); then
    usage
    die "Command $g_cmd needs $args argument(s)!"
fi

if (( root == 1 )); then
    [[ "$UID" != 0 ]] && die "This command needs root privileges!"
fi

"${handler[@]}"
